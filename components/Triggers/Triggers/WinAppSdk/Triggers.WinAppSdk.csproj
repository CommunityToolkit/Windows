<Project Sdk="Microsoft.NET.Sdk">

  <Import Project="$(ToolingDirectory)\MultiTarget\TargetFrameworks.props" />
  <PropertyGroup>
    <IsDeployableHead>true</IsDeployableHead>
    <IsUno>false</IsUno>
    <IsWasm>false</IsWasm>
    <IsWasmHead>false</IsWasmHead>
    <IsWasmLib>false</IsWasmLib>
    <IsDroid>false</IsDroid>
    <IsMacOS>false</IsMacOS>
    <IsiOS>false</IsiOS>
    <IsUwp>false</IsUwp>
    <IsWinAppSdk>true</IsWinAppSdk>
    <IsWpf>false</IsWpf>
    <IsWpfHead>false</IsWpfHead>
    <IsWpfLib>false</IsWpfLib>
    <IsGtk>false</IsGtk>
    <IsGtkHead>false</IsGtkHead>
    <IsGtkLib>false</IsGtkLib>
  </PropertyGroup>

  <Import Project="$(ToolingDirectory)\MultiTarget\ProjectIdentifiers.props" />
  <Import Project="$(ToolingDirectory)\ProjectHeads\App.Head.WinAppSdk.props" />

  <ItemGroup>
    <ProjectReference Include="..\..\src\*.csproj" />
    <ProjectReference Include="..\..\samples\*.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <RootNamepace>TriggersExperiment.Samples.WinAppSdk</RootNamepace>
  </PropertyGroup>

  <!-- Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
         Tools extension to be activated for this project even if the Windows App SDK Nuget
         package has not yet been restored -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>
</Project>
